apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  annotations:
    alb.ingress.kubernetes.io/healthcheck-path: /router
  labels:
    app: api-gateway
spec:
  type: NodePort
  ports:
  - nodePort: 31798
    port: 9000
    targetPort: 80
    protocol: TCP
  selector:
    app: api-gateway

---

kind: ConfigMap
apiVersion: v1
metadata:
  name: api-gateway-v2
  namespace: default
data:
  application.properties: |-
spring.application.name:router

server.port:9000

server.compression.enabled:true
server.compression.min-response-size:1KB
server.compression.mime-types:application/json,application/xml,text/html,text/xml,text/plain

server.servlet.context-path:/router

eureka.client.service-url.defaultZone:http://localhost:8761/eureka
eureka.instance.prefer-ip-address:true
eureka.instance.lease-renewal-interval-in-seconds:2
eureka.instance.lease-expiration-duration-in-seconds:5
eureka.client.registry-fetch-interval-seconds:5

info.app.name:Api Gateway
info.app.description:An Api gateway which will handle all the request coming to vahana
info.app.version:1.0

feign.client.config.default.connectTimeout: 160000000
feign.client.config.default.readTimeout: 160000000

feign.client.config.default.logger-level:FULL

isLogEnabled:false

tempLogsPath:E:\\logs
kafka.integration.url : 10.20.1.103:9092

keys_to_mask:
microServiceLogs:OFF


corePoolSize:20
maxPoolSize:50
queueCapacity:50
timeToLive:10

#management.endpoints.web.exposure.include=info, health,heapdump,features,threaddump,metrics,loggers,logfile
#management.endpoint.health.show-details=always

spring.boot.admin.client.instance.management-base-url:http://127.0.0.1:9000/router
spring.boot.admin.client.instance.service-url:http://127.0.0.1:9000/router
spring.boot.admin.client.instance.name:router
spring.boot.admin.client.instance.prefer-ip:true
spring.boot.admin.client.url:http://localhost:9015

spring.boot.admin.client.username:admin
spring.boot.admin.client.password:admin

spring.boot.admin.client.instance.metadata.tags.environment:DEV
info.tags.name:VAHANA

#logging.file=/deployment/logs/vconnect/api-gateway/general.log
#logging.config=/deployment/vahana-services/api-gateway/resources/log4j2.xml
# Add Micrometer Config
management.endpoint.metrics.enabled:true
management.endpoints.web.exposure.include:*
management.endpoint.prometheus.enabled:true
management.endpoint.health.show-details:always
management.metrices.export.prometheus.enabled:true

#metricsName=api-gateway

isHttpTracingEnabled:true
host:172.30.0.215
service:api-gateway
region:dev


---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: api-gateway
  name: api-gateway
  namespace: default
spec:

  replicas: 1
  selector:
    matchLabels:
      app: api-gateway-test
  template:
    metadata:
      labels:
        app:  api-gateway-test
    spec:
      containers:
      - name: api-gateway-test
        image: 712693083859.dkr.ecr.ap-south-1.amazonaws.com/tpg-admin-server:jenkins-build-1.0.58
        ports:
        - containerPort: 9000
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 200m
        volumeMounts:
        - mountPath: /app/
          name: api-gateway-volume    
      restartPolicy: Always
      imagePullSecrets:
      - name: aws-ecr-4
        
      
      volumes:
      - configMap:
          name: api-gateway-v2
        name: api-gateway-volume


       
---


apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: api-gateway-test
#  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway-test
  minReplicas: 1
  maxReplicas: 3
  
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageUtilization: 50
